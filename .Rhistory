theme(axis.text = element_blank())
map
head(pdata)
glimpse(pdata)
attach(pdata)
vars <- data.frame(pdata$female_unemp, pdata$tech_employment, pdata$HRST,
pdata$regional_GDP, pdata$higher_edu, pdata$pop_density)
stargazer(vars, type = "text", title = "Descriptive stats")
## Data Visualization
femp23 <- data %>%
filter(year == 2021)
weak_femp_reg <- femp23 %>%
arrange(desc(female_unemp)) %>%
slice_head(n = 10) %>%
pull(geo)
reg_no_na <- data %>%
group_by(geo) %>%
filter(all(!is.na(female_unemp))) %>%
pull(geo) %>% unique()
evol_f_unempl <- data %>%
filter(geo %in% weak_femp_reg & geo %in% reg_no_na)
# Plot 1
ggplot(evol_f_unempl, aes(x = year, y = female_unemp, color= geo)) +
geom_line(size = .8) +
labs(y = 'Unemploy rate (%)', x = 'Time') +
theme_light() +
theme()
sdata_13 <- sdata[sdata$year == 2012, ]
sdata_23 <- sdata[sdata$year == 2021, ]
# Plot 2
ggplot() +
geom_sf(data = sdata_13, aes(fill = female_unemp), color = "white") +
scale_fill_viridis_c(option = "magma", name = "Unemployment rate (%)") +
theme_minimal() + theme(axis.text = element_blank())
ggplot() +
geom_sf(data = sdata_23, aes(fill = female_unemp), color = "white") +
scale_fill_viridis_c(option = "magma", name = "Unemployment rate (%)") +
theme_minimal() + theme(axis.text = element_blank())
# Plot 3
ggplot() +
geom_sf(data = sdata_23, aes(fill = regional_GDP), color = "white") +
scale_fill_viridis_c(option = "plasma", name = 'Annual Revenu (in K€)') +
theme_minimal() + theme(axis.text = element_blank())
# Spatial models estimation
formula <- female_unemp ~ tech_employment + HRST + regional_GDP +
higher_edu + pop_density
pdata <- pdata.frame(pdata, index = c('id', 'year'))
pdim(pdata)
## Spatial Weighted matrix (W)
nb_queen <- poly2nb(shp_filter, queen = TRUE)
W <- nb2listw(nb_queen, style = "W", zero.policy = TRUE)  # W =Normalisation row-standardized
# zoro-policy : droping no neighboors
no_neighbors <- which(card(nb_queen) == 0)
filtered <- shp_filter[-no_neighbors, ]
new_codes <- filtered$NUTS_ID
pdata <- pdata[pdata$id %in% new_codes, ]
nb_queen <- poly2nb(filtered, queen = TRUE)
W <- spdep::nb2listw(nb_queen, style = "W", zero.policy = TRUE)
W
# Plot 4
plot(st_geometry(filtered), border="gray")
plot(nb_queen, st_coordinates(st_centroid(filtered)), add=TRUE, col="blue", pch=20)
## Non-spatial models
pdata <- pdata.frame(pdata, index = c('id', 'year'))
ols_model <- plm(formula, data = pdata, model = "pooling")
fe_ind <- plm(formula, data = pdata, model = "within", effect = "individual")
fe_tim <- plm(formula, data = pdata, model = "within", effect = "time")
fe_woway <- plm(formula, data = pdata, model = "within", effect = "twoways")
re_model <- plm(formula, data = pdata, model = "random")
models <- list("Pooled (OLS)" = ols_model, "Individual Fixed effects" = fe_ind,
"Time Fixed effects" = fe_tim, "Twoway Fixed effects" = fe_woway,
"Random effects" = re_model)
modelsummary(models, stars = TRUE, gof_map = "all", statistic = "std.error",
output = "latex")
### Panel data Tests
# BP test
cat("====== BP Test : OLS vs FE/RE ======")
plmtest(ols_model, type = "bp")
# Test F
cat("\n====== F Test : FE vs OLS ======")
pFtest(fe_ind, ols_model)
# Twoway vs Indiv
cat("\n===== LR Test : Twoway vs Indiv =====\n")
lrtest(fe_tim, fe_woway)
# Hausman test (plm)
cat("\n====== Hausman Test : FE vs RE ======")
phtest(fe_woway, re_model)
### Spatial Hausman Tests
cat("\n====== Spatial Hausman Test : FE vs RE - SEM ======")
sphtest(formula, data =pdata, listw = W, spatial.model = "error", method = "ML")
cat("\n====== Spatial Hausman Test : FE vs RE - SAR ======")
sphtest(formula, data =pdata, listw = W, spatial.model = "lag", method = "ML")
### Robust Spatial LM Tests
cat('OLS ============================\n')
slmtest(ols_model, W, test = "rlml")
slmtest(ols_model, W, test = "rlme")
cat('\n\nTwoway FE ======================\n')
slmtest(fe_woway, W, test = "rlml")
slmtest(fe_woway, W, test = "rlme")
cat('\n\nIndividual FE ==================\n')
slmtest(fe_ind, W, test = "rlml")
slmtest(fe_ind, W, test = "rlme")
cat('\n\nTime FE ========================\n')
slmtest(fe_tim, W, test = "rlml")
slmtest(fe_tim, W, test = "rlme")
cat('\n\nRE =============================\n')
slmtest(re_model, W, test = "rlml")
slmtest(re_model, W, test = "rlme")
## Spatial econometrics models
pool_model <- spml(formula, data = pdata, listw = W, lag = FALSE,
model = "pooling")
sem_model <- spml(formula, data = pdata, listw = W, spatial.error = "b",
model = "within", effect = "twoway")
sar_model <- spml(formula, data = pdata, listw = W, lag = TRUE, model = "within",
effect = "twoway", spatial.error ="none")
sac_model <- spgm(formula, data = pdata, listw = W, listw2 = W, model = "within",
lag = TRUE, spatial.error = TRUE, moments = "fullweights")
models <- list(
"Pooled OLS" = pool_model,
"SEM FE" = sem_model,
"SAR FE" = sar_model,
"SAC FE" = sac_model
)
table <- combine_models(models)
mod_sumsum(table, format = "latex")
# Results
## SAR Fixed effects
summary(sar_model)
## Direct, indirect, totel effects
T <- length(unique(pdata$year))
impacts_sar <- impacts(sar_model, listw = W, time = T)
summary(impacts_sar)
# ==============================================================================
# Calculer la surface de chaque région (en m²)
shp_filter$surface <- st_area(shp_filter)
# Convertir en km² si besoin
shp_filter$surface_km2 <- as.numeric(shp_filter$surface) / 1e6
install.packages("fields")
coords <- st_coordinates(st_centroid(shp_filter))
# Matrice des distances euclidiennes
library(fields)
D <- rdist(coords)  # matrice n x n
View(shp_filter)
# Surface des j (colonnes)
S <- matrix(rep(shp_filter$surface_km2, each = nrow(D)), nrow = nrow(D), byrow = FALSE)
# Éviter les divisions par 0 (diagonale)
D[D == 0] <- NA
W_custom <- S / D
diag(W_custom) <- 0  # pas d'auto-influence
# Normalisation par ligne (row-standardized)
row_sums <- rowSums(W_custom, na.rm = TRUE)
W_custom_norm <- W_custom / row_sums
# Créer la matrice de voisinage
W_listw <- mat2listw(W_custom_norm, style = "W", na.action = na.omit)
W_custom <- S / D
diag(W_custom) <- 0  # pas d'auto-influence
# Remplacer les NA par 0 avant normalisation
W_custom[is.na(W_custom)] <- 0
# Row standardisation (somme des lignes = 1)
row_sums <- rowSums(W_custom)
row_sums[row_sums == 0] <- 1  # éviter division par zéro si une ligne est toute à 0
W_custom_norm <- W_custom / row_sums
# Créer la matrice de voisinage
W_listw <- mat2listw(W_custom_norm, style = "W", na.action = na.omit)
# Créer la matrice de voisinage
W_listw <- mat2listw(W_custom_norm, style = "W")
sar_model_custom <- spml(formula, data = pdata, listw = W_listw, lag = TRUE,
model = "within", effect = "twoway")
# Créer la matrice de voisinage
W_listw <- mat2listw(W_custom_norm, style = "W", zero.policy = TRUE)
sar_model_custom <- spml(formula, data = pdata, listw = W_listw, lag = TRUE,
model = "within", effect = "twoway")
W_listw
W
pdim(pdata)
View(filtered)
filtered$surface <- st_area(filtered)
# Convertir en km² si besoin
filtered$surface_km2 <- as.numeric(filtered$surface) / 1e6
coords <- st_coordinates(st_centroid(filtered))
# Matrice des distances euclidiennes
library(fields)
D <- rdist(coords)  # matrice n x n
# Surface des j (colonnes)
S <- matrix(rep(filtered$surface_km2, each = nrow(D)), nrow = nrow(D), byrow = FALSE)
# Éviter les divisions par 0 (diagonale)
D[D == 0] <- NA
W_custom <- S / D
diag(W_custom) <- 0  # pas d'auto-influence
# Remplacer les NA par 0 avant normalisation
W_custom[is.na(W_custom)] <- 0
# Row standardisation (somme des lignes = 1)
row_sums <- rowSums(W_custom)
row_sums[row_sums == 0] <- 1  # éviter division par zéro si une ligne est toute à 0
W_custom_norm <- W_custom / row_sums
# Créer la matrice de voisinage
W_listw <- mat2listw(W_custom_norm, style = "W", zero.policy = TRUE)
W_listw
sar_model_custom <- spml(formula, data = pdata, listw = W_listw, lag = TRUE,
model = "within", effect = "twoway")
modelsummary(sar_model, sar_model_custom)
summary(sar_model_custom)
summary(sar_model)
lrtest(sar_model, sar_model_custom)
slmtest(sar_model, sar_model_custom)
slmtest(re_model, W, test = "rlml")
l1 <- logLik(sar_model_custom)
sar_model_custom
sar_model_custom <- spml(formula, data = pdata, listw = W_listw, lag = TRUE,
model = "within", effect = "twoway", spatial.error ="none")
summary(sar_model_custom)
summary(sar_model)
l1 <- sar_model_custom$logLik
l2 <-  sar_model$logLik
LR <- 2 * (as.numeric(l1) - as.numeric(l2))
# Degrés de liberté = nb paramètres ajoutés
df <- attr(l1, "df") - attr(l2, "df")
# p-value
pval <- 1 - pchisq(LR, df)
# Résultat
cat("LR test statistic =", LR, "\n")
cat("Degrees of freedom =", df, "\n")
cat("p-value =", pval, "\n")
l1 <- sar_model_custom$logLik
l2 <-  sar_model$logLik
LR <- 2 * (as.numeric(l1) - as.numeric(l2))
# Degrés de liberté = nb paramètres ajoutés
df <- attr(l1, "df") - attr(l2, "df")
# p-value
pval <- 1 - pchisq(LR, df)
# Résultat
cat("LR test statistic =", LR, "\n")
cat("Degrees of freedom =", df, "\n")
cat("p-value =", pval, "\n")
# Degrés de liberté = nb paramètres ajoutés
df <- 1
# p-value
pval <- 1 - pchisq(LR, df)
# Résultat
cat("LR test statistic =", LR, "\n")
cat("Degrees of freedom =", df, "\n")
cat("p-value =", pval, "\n")
pchisq(LR, df)
l1
l2
summary(sar_model_custom)
summary(sar_model)
l1 <- sar_model_custom$logLik
l2 <-  sar_model$logLik
LR <- 2 * (as.numeric(l1) - as.numeric(l2))
LR
res1 <- residuals(sar_model)         # modèle avec W "classique"
res2 <- residuals(sar_model_custom)  # modèle avec W pondéré par surface
# Test de Moran's I sur les résidus
moran1 <- moran.test(res1, listw = W)
res1
dim(res1)
pdim(res1)
# Test de Moran's I sur les résidus
moran1 <- moran.test(res1, listw = W)
moran2 <- moran.test(res2, listw = W_listw)
source("functions.R")
# Test de Moran's I sur les résidus
# Test avec ton modèle custom et la matrice pondérée par surface
moran_resid_panel(sar_model_custom, pdata, W_listw)
# Ou avec la matrice de contiguïté classique
moran_resid_panel(sar_model, pdata, W)
View(pdata)
source("functions.R")
# Test de Moran's I sur les résidus
# Test avec ton modèle custom et la matrice pondérée par surface
moran_resid_panel(sar_model_custom, pdata, W_listw)
# Ou avec la matrice de contiguïté classique
moran_resid_panel(sar_model, pdata, W)
source("functions.R")
# Test de Moran's I sur les résidus
# Test avec ton modèle custom et la matrice pondérée par surface
moran_resid_panel(sar_model_custom, pdata, W_listw)
filtered
rownames(W_custom_norm) <- filtered$NUTS_ID
colnames(W_custom_norm) <- filtered$NUTS_ID
W_listw <- mat2listw(W_custom_norm, style = "W", zero.policy = TRUE)
W_listw
sar_model_custom <- spml(formula, data = pdata, listw = W_listw, lag = TRUE,
model = "within", effect = "twoway", spatial.error ="none")
summary(sar_model_custom)
summary(sar_model)
# Test de Moran's I sur les résidus
# Test avec ton modèle custom et la matrice pondérée par surface
moran_resid_panel(sar_model_custom, pdata, W_listw)
# Ou avec la matrice de contiguïté classique
moran_resid_panel(sar_model, pdata, W)
rownames(nb_queen) <- filtered$NUTS_ID
W <- spdep::nb2listw(nb_queen, style = "W", zero.policy = TRUE)
rownames(W) <- filtered$NUTS_ID
colnames(W) <- filtered$NUTS_ID
W
nb_queen <- poly2nb(filtered, queen = TRUE)
W <- spdep::nb2listw(nb_queen, style = "W", zero.policy = TRUE)
attr(W, "region.id") <- filtered$NUTS_ID
W
# Ou avec la matrice de contiguïté classique
moran_resid_panel(sar_model, pdata, W)
# Test de Moran's I sur les résidus
# Test avec ton modèle custom et la matrice pondérée par surface
moran_resid_panel(sar_model_custom, pdata, W_listw)
# Ou avec la matrice de contiguïté classique
moran_resid_panel(sar_model, pdata, W)
source("functions.R")
plot_residuals_map(pdata, shp_filter, sar_model_custom, title = "SAR Résidus (W = S/d)")
plot_residuals_map(pdata, filtered, sar_model_custom, title = "SAR Résidus (W = S/d)")
plot_residuals_map(pdata, filtered, sar_model_custom, title = "SAR Résidus (W = S/d)")
plot_residuals_map(pdata, filtered, sar_model, title = "SAR Résidus (W = contiguïté)")
AIC(sar_model)
source("functions.R")
models <- spml_metrics(sar_model, sar_model_custom, model_names = c("SAR W classique", "SAR W = S/d"))
W_iden <- build_surface_weighted_W(shp_filter, f_surface = identity)
W_log      <- build_surface_weighted_W(shp_filter, f_surface = log)
W_sqrt     <- build_surface_weighted_W(shp_filter, f_surface = sqrt)
sar_W <- spml(formula, data = pdata, listw = W, lag = TRUE, model = "within",
effect = "twoway", spatial.error = "none")
sar_iden <- spml(formula, data = pdata, listw = W_iden, lag = TRUE, model = "within",
effect = "twoway", spatial.error = "none")
W_iden <- build_surface_weighted_W(filtered, f_surface = identity)
W_log      <- build_surface_weighted_W(filtered, f_surface = log)
W_sqrt     <- build_surface_weighted_W(filtered, f_surface = sqrt)
sar_W <- spml(formula, data = pdata, listw = W, lag = TRUE, model = "within",
effect = "twoway", spatial.error = "none")
sar_iden <- spml(formula, data = pdata, listw = W_iden, lag = TRUE, model = "within",
effect = "twoway", spatial.error = "none")
sar_log <- spml(formula, data = pdata, listw = W_log, lag = TRUE, model = "within",
effect = "twoway", spatial.error = "none")
sar_sqrt <- spml(formula, data = pdata, listw = W_sqrt, lag = TRUE, model = "within",
effect = "twoway", spatial.error = "none")
models <- spml_metrics(
sar_W,
sar_iden,
sar_log,
sar_sqrt,
model_names = c("Contiguity W", "S/d", "log(S)/d", "sqrt(S)/d")
)
source("functions.R")
plot_model_residuals_comparison(
models = list(sar_W, sar_iden, sar_log, sar_sqrt),
model_names = c("Contiguity W", "S/d", "log(S)/d", "sqrt(S)/d"),
pdata = pdata
)
source("functions.R")
plot_residuals_maps_grid(
models = list(sar_W, sar_iden, sar_log, sar_sqrt),
model_names = c("Contiguity W", "S/d", "log(S)/d", "sqrt(S)/d"),
pdata = pdata,
shp = shp_filter
)
plot_residuals_maps_grid(
models = list(sar_W, sar_iden, sar_log, sar_sqrt),
model_names = c("Contiguity W", "S/d", "log(S)/d", "sqrt(S)/d"),
pdata = pdata,
shp = filtered
)
source("functions.R")
evaluate_spatial_models(
models = list(sar_W, sar_identity, sar_log, sar_sqrt),
model_names = c("Contiguity W", "S/d", "log(S)/d", "sqrt(S)/d"),
pdata = pdata,
listws = list(W, W_identity, W_log, W_sqrt),
shp = shp_filter,
T = length(unique(pdata$year))
)
evaluate_spatial_models(
models = list(sar_W, sar_iden, sar_log, sar_sqrt),
model_names = c("Contiguity W", "S/d", "log(S)/d", "sqrt(S)/d"),
pdata = pdata,
listws = list(W, W_iden, W_log, W_sqrt),
shp = filtered,
T = length(unique(pdata$year))
)
source("functions.R")
evaluate_spatial_models(
models = list(sar_W, sar_iden, sar_log, sar_sqrt),
model_names = c("Contiguity W", "S/d", "log(S)/d", "sqrt(S)/d"),
pdata = pdata,
listws = list(W, W_iden, W_log, W_sqrt),
shp = filtered,
T = length(unique(pdata$year))
)
summary(impacts(sar_iden, listw = listw, time = time, R = 100))
summary(impacts(sar_iden, listw = W_iden, time = time, R = 100))
summary(impacts(sar_iden, listw = W_iden, time = T, R = 100))
innnn <- summary(impacts(sar_iden, listw = W_iden, time = T, R = 100))
innnn$res
innnn$res$direct[1,1]
innnn$res$direct[1]
source("functions.R")
source("functions.R")
evaluate_spatial_models(
models = list(sar_W, sar_iden, sar_log, sar_sqrt),
model_names = c("Contiguity W", "S/d", "log(S)/d", "sqrt(S)/d"),
pdata = pdata,
listws = list(W, W_iden, W_log, W_sqrt),
shp = filtered,
T = length(unique(pdata$year)),
varnb = 2
)
source("functions.R")
evaluate_spatial_models(
models = list(sar_W, sar_iden, sar_log, sar_sqrt),
model_names = c("Contiguity W", "S/d", "log(S)/d", "sqrt(S)/d"),
pdata = pdata,
listws = list(W, W_iden, W_log, W_sqrt),
shp = filtered,
T = length(unique(pdata$year)),
varnb = 2
)
evaluate_spatial_models(
models = list(sar_W, sar_iden, sar_log, sar_sqrt),
model_names = c("Contiguity W", "S/d", "log(S)/d", "sqrt(S)/d"),
pdata = pdata,
listws = list(W, W_iden, W_log, W_sqrt),
shp = filtered,
T = length(unique(pdata$year)),
varnb = 2
)
source("functions.R")
evaluate_spatial_models(
models = list(sar_W, sar_iden, sar_log, sar_sqrt),
model_names = c("Contiguity W", "S/d", "log(S)/d", "sqrt(S)/d"),
pdata = pdata,
listws = list(W, W_iden, W_log, W_sqrt),
shp = filtered,
T = length(unique(pdata$year)),
varnb = 2
)
source("functions.R")
evaluate_spatial_models(
models = list(sar_W, sar_iden, sar_log, sar_sqrt),
model_names = c("Contiguity W", "S/d", "log(S)/d", "sqrt(S)/d"),
pdata = pdata,
listws = list(W, W_iden, W_log, W_sqrt),
shp = filtered,
T = length(unique(pdata$year)),
varnb = 2
)
source("functions.R")
compare_predictive_metrics(
models = list(sar_W, sar_iden, sar_log, sar_sqrt),
model_names = c("Contiguity W", "S/d", "log(S)/d", "sqrt(S)/d"),
pdata = pdata
)
pdata$surface <- as.numeric(st_area(shp_filter)) / 1e6
model_surface <- plm(female_unemp ~ tech_employment + HRST + regional_GDP + higher_edu + pop_density + surface,
data = pdata, model = "within", effect = "twoway")
surfaces <- data.frame(
id = shp_filter$NUTS_ID,
surface_km2 = as.numeric(st_area(shp_filter)) / 1e6
)
pdata <- pdata %>%
left_join(surfaces, by = "id")
model_surface <- plm(female_unemp ~ tech_employment + HRST + regional_GDP + higher_edu + pop_density + surface,
data = pdata, model = "within", effect = "twoway")
names(pdata)
model_surface <- plm(female_unemp ~ tech_employment + HRST + regional_GDP + higher_edu + pop_density + surface_km2,
data = pdata, model = "within", effect = "twoway")
summary(model_surface)
model_surface <- plm(female_unemp ~ tech_employment + HRST + regional_GDP + higher_edu + pop_density + surface_km2,
data = pdata, model = "within", effect = "twoway")
summary(model_surface)
cat("MSE  =", round(mse, 4), "\n")
res <- spml_ml_pipeline(
data = pdata,
formula = female_unemp ~ tech_employment + HRST + regional_GDP + higher_edu + pop_density,
listw = W
)
# =================================
spml_ml_pipeline <- function(data, formula, listw, train_ratio = 0.7, time_var = "year", id_var = "id", seed = 123) {
set.seed(seed)
# 1. Créer un split train/test selon les régions (id)
all_ids <- unique(data[[id_var]])
train_ids <- sample(all_ids, size = floor(length(all_ids) * train_ratio))
train_data <- data %>% filter(!!sym(id_var) %in% train_ids)
test_data  <- data %>% filter(!(!!sym(id_var) %in% train_ids))
# 2. Créer les pdata.frames
pdata_train <- pdata.frame(train_data, index = c(id_var, time_var))
pdata_test  <- pdata.frame(test_data, index = c(id_var, time_var))
# 3. Entraîner le modèle spml sur les données train
model <- spml(formula, data = pdata_train, listw = listw,
lag = TRUE, model = "within", effect = "twoway", spatial.error = "none")
# 4. Prédictions
y_true <- model$model[[1]]  # nom de la variable dépendante
y_hat_train <- fitted(model)
# ⚠️ spml ne prédit pas directement sur de nouvelles données → approximation :
# on applique les coefficients aux données test
# (attention : ne gère pas l’effet spatial dans test, approximation)
coefs <- model$coefficients
test_matrix <- model.matrix(formula, data = pdata_test)
y_hat_test <- as.numeric(test_matrix %*% coefs)
y_test <- model.response(model.frame(formula, data = pdata_test))
# 5. Évaluation
mse <- mean((y_test - y_hat_test)^2, na.rm = TRUE)
rmse <- sqrt(mse)
mae <- mean(abs(y_test - y_hat_test), na.rm = TRUE)
cat("✅ Résultats (test set) :\n")
cat("MSE  =", round(mse, 4), "\n")
cat("RMSE =", round(rmse, 4), "\n")
cat("MAE  =", round(mae, 4), "\n")
return(list(model = model, y_test = y_test, y_pred = y_hat_test))
}
res <- spml_ml_pipeline(
data = pdata,
formula = female_unemp ~ tech_employment + HRST + regional_GDP + higher_edu + pop_density,
listw = W
)
